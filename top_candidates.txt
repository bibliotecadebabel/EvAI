((-1, 1, 3, 32, 32), (0, 3, 5, 3, 3), (0, 8, 5, 3, 3), (0, 5, 10, 4, 4), (0, 15, 20, 3, 3), (0, 30, 60, 3, 3), (0, 95, 60, 30, 30), (1, 60, 10), (2,), (3, -1, 0), (3, -1, 1), (3, 0, 1), (3, 1, 2), (3, 1, 3), (3, 2, 3), (3, 3, 4), (3, 2, 4), (3, 3, 5), (3, 1, 5), (3, 2, 5), (3, 4, 5), (3, 5, 6), (3, 6, 7))


 ((-1, 1, 3, 32, 32), (0, 3, 20, 3, 3), (0, 23, 5, 4, 4), (0, 5, 10, 5, 5), (0, 10, 10, 6, 6), (0, 20, 30, 25, 25), (1, 30, 10), (2,), (3, -1, 0), (3, 0, 1), (3, -1, 1), (3, 1, 2), (3, 2, 3), (3, 3, 4), (3, 2, 4), (3, 4, 5), (3, 5, 6))

notes:

starting with bigget dt works better


Base network


top candidate from exponential decay current energy .581

 ((-1, 1, 3, 32, 32), (0, 3, 40, 3, 3), (0, 43, 40, 3, 3), (0, 80, 20, 4, 4), (0, 60, 20, 3, 3), (0, 20, 41, 3, 3), (0, 41, 41, 3, 3), (0, 41, 41, 3, 3), (0, 123, 41, 3, 3), (0, 102, 41, 3, 3), (0, 82, 41, 3, 3), (0, 142, 41, 30, 30), (1, 41, 10), (2,), (3, -1, 0), (3, 0, 1), (3, -1, 1), (3, 0, 2), (3, 1, 2), (3, 0, 3), (3, 2, 3), (3, 3, 4), (3, 4, 5), (3, 5, 6), (3, 4, 7), (3, 5, 7), (3, 6, 7), (3, 3, 8), (3, 4, 8), (3, 7, 8), (3, 8, 9), (3, 7, 9), (3, 3, 10), (3, 0, 10), (3, 8, 10), (3, 9, 10), (3, 10, 11), (3, 11, 12))

top candidate from exponential decay current energy .5516

((-1, 1, 3, 32, 32), (0, 3, 40, 3, 3), (0, 43, 10, 3, 3), (0, 50, 20, 4, 4), (0, 60, 20, 3, 3), (0, 20, 41, 3, 3), (0, 41, 41, 3, 3), (0, 102, 41, 3, 3), (0, 41, 41, 3, 3), (0, 142, 41, 30, 30), (1, 41, 10), (2,), (3, -1, 0), (3, 0, 1), (3, -1, 1), (3, 0, 2), (3, 1, 2), (3, 0, 3), (3, 2, 3), (3, 3, 4), (3, 4, 5), (3, 3, 6), (3, 4, 6), (3, 5, 6), (3, 6, 7), (3, 3, 8), (3, 0, 8), (3, 6, 8), (3, 7, 8), (3, 8, 9), (3, 9, 10))

in its reduced version:

((-1,1,3,32,32),
        (0,3, 5, 3 , 3),
        (0,8, 5, 3,  3),
        (0,13, 41, 32, 32),
        (1, 5,10),
         (2,),
        (3,-1,0),
        (3,0,1),(3,-1,1),
        (3,1,2),(3,0,2),(3,-1,2),
        (3,2,3),
        (3,3,4))

top camdidate, from exponential decay

((-1, 1, 3, 32, 32), (0, 3, 20, 3, 3), (0, 20, 10, 3, 3), (0, 30, 10, 4, 4), (0, 30, 20, 3, 3), (0, 20, 41, 3, 3), (0, 61, 41, 3, 3), (0, 81, 41, 30, 30), (1, 41, 10), (2,), (3, -1, 0), (3, 0, 1), (3, 0, 2), (3, 1, 2), (3, 0, 3), (3, 2, 3), (3, 3, 4), (3, 3, 5), (3, 4, 5), (3, 3, 6), (3, 0, 6), (3, 5, 6), (3, 6, 7), (3, 7, 8))

training at

iter_init = 3000
iter_final = 800

# DT ARRAY #1
DT_ARRAY_1 = [ 10 ** (-1-4*k/iter_init) for k in range(iter_init)]

# DT ARRAY #2
DT_ARRAY_2 = [ 10 ** (-3-3*(k/iter_final)) for k in range(iter_final)]
# weight_decay parameter

Next step:

training at: screen -r 43422

calibrate alone step

top candidate, trying to reduce size of last network


 ((-1, 1, 3, 32, 32), (0, 3, 5, 4, 4), (0, 8, 5, 3, 3), (0, 5, 5, 3, 3), (0, 10, 10, 4, 4), (0, 10, 20, 3, 3), (0, 20, 5, 4, 4), (0, 43, 5, 7, 7), (0, 10, 5, 7, 7), (0, 5, 10, 3, 3), (0, 13, 10, 3, 3), (0, 25, 40, 8, 8), (0, 40, 48, 3, 3), (0, 48, 48, 3, 3), (0, 136, 48, 3, 3), (0, 116, 48, 32, 32), (1, 48, 10), (2,), (3, -1, 0), (3, -1, 1), (3, 0, 1), (3, 1, 2), (3, 1, 3), (3, 2, 3), (3, 3, 4), (3, 4, 5), (3, -1, 6), (3, 1, 6), (3, 3, 6), (3, 4, 6), (3, 5, 6), (3, 6, 7), (3, 1, 7), (3, 7, 8), (3, 8, 9), (3, -1, 9), (3, 7, 10), (3, 8, 10), (3, 9, 10), (3, 10, 11), (3, 11, 12), (3, 10, 13), (3, 11, 13), (3, 12, 13), (3, 10, 14), (3, 7, 14), (3, 8, 14), (3, 9, 14), (3, 13, 14), (3, -1, 14), (3, 14, 15))